services:
  nodecontroller:
    image: log430/nodecontroller:latest
    container_name: NodeController
    restart: always
    ports:
      - '${NODE_CONTROLLER_PORT}:8080'
      - '4300-4310:4300-4310'
    environment:
      TEAM_NAME: '${TEAM_NAME}'
      STUDENT_NAME: '${STUDENT_NAME}'
      GROUP: '${GROUP}'
      SECRET: '${SECRET}'
      INGRESS_ADDRESS: '${INGRESS_ADDRESS}'
      INGRESS_PORT: '${INGRESS_PORT}'
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      MQ_SERVICE_NAME: EventStream
      CUSTOM_CONTAINER_PORTS_DISCOVERY: 5672,5432,8080,6379
      BRIDGE_PORT: 32674
      # Trace > Information > Error
      Logging__LogLevel__Default: Information
      CONNECT_TO_INGRESS: true
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock

  event-store:
    container_name: EventStream
    image: cluster_mq
    restart: always
    hostname: EventStream
    build:
      context: ../ClusterRabbitMq/
      dockerfile: Dockerfile
    ports:
      - '32771:5672'
      - '30001:15672'
      - '25673:25672'
    environment:
      ID: EventStream
      RABBITMQ_ERLANG_COOKIE_FILE: /var/lib/rabbitmq/.erlang.cookie
    labels:
      Artifact_Category: Connector
      Replicas: EventStream,EventStream2,EventStream3

  routetimeprovider:
    container_name: RouteTimeProvider
    image: routetimeprovider
    restart: always
    build:
      context: ../RouteTimeProvider
      dockerfile: /RouteTimeProvider/Dockerfile
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      ID: RouteTimeProvider
      API_KEY: '${TOMTOM}'
    ports:
      - '32772:8080'
    labels:
      ARTIFACT_CATEGORY: Computation
      Replicas: RouteTimeProvider,RouteTimeProvider2

  tripcomparator:
    container_name: TripComparator
    image: tripcomparator
    restart: always
    build:
      context: ../TripComparator
      dockerfile: /Configuration/Dockerfile
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      IS_LEADER_TC: "false"
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      ID: TripComparator
      MQ_SERVICE_NAME: EventStream
    ports:
      - '32773:8080'
    labels:
      ARTIFACT_CATEGORY: Computation
      REPLICAS : TripComparator
  
  tripcomparator2:
    container_name: TripComparator2
    image: tripcomparator2
    restart: always
    build:
      context: ../TripComparator2
      dockerfile: /Configuration/Dockerfile
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      IS_LEADER_TC_2: "false"
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      ID: TripComparator2
      MQ_SERVICE_NAME: EventStream
    ports:
      - '32788:8080'
    labels:
      ARTIFACT_CATEGORY: Computation
      REPLICAS : TripComparator2

  stm:
    container_name: STM
    image: stm
    restart: always
    build:
      context: ../STM
      dockerfile: /Configuration/Dockerfile
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      ID: STM
      API_KEY: '${STM}'
      # HIGH (3gb) > MEDIUM (1.5gb) > LOW (300mb)
      MEMORY_CONSUMPTION: LOW
      POSTGRES_SERVER_ADRESSE: ${POSTGRES_SERVER_ADRESSE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_PORT: ${DB_PORT}
      IS_LEADER: "false"
    ports:
      - '32774:8080'
    labels:
      Replicas : STM
      ARTIFACT_CATEGORY: Computation

  stm2:
    container_name: STM2
    image: stm2
    restart: always
    build:
      context: ../STM2
      dockerfile: /Configuration/Dockerfile
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      ID: STM2
      API_KEY: '${STM}'
      # HIGH (3gb) > MEDIUM (1.5gb) > LOW (300mb)
      MEMORY_CONSUMPTION: LOW
      POSTGRES_SERVER_ADRESSE_2: ${POSTGRES_SERVER_ADRESSE}
      POSTGRES_USER_2: ${POSTGRES_USER}
      POSTGRES_PASSWORD_2: ${POSTGRES_PASSWORD}
      POSTGRES_DB_2: ${POSTGRES_DB}
      DB_PORT_2: ${DB_PORT}
      IS_LEADER_2: "false"
    ports:
      - '32790:8080'
    labels:
      Replicas : STM2
      ARTIFACT_CATEGORY: Computation
  
  managerSTM:
    container_name: ManagerSTM
    image: managerstm
    restart: always
    build:
      context: ../ManagerSTM
      dockerfile: /RouteTimeProvider/Dockerfile
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      ID: ManagerSTM
      API_KEY: '${TOMTOM}'
    ports:
      - '32778:8080'
    labels:
      ARTIFACT_CATEGORY: Computation
      REPLICAS: ManagerSTM,ManagerSTM2

  managerTC:
    container_name: ManagerTC
    image: managertc
    restart: always
    build:
      context: ../ManagerTC
      dockerfile: /RouteTimeProvider/Dockerfile
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      ID: ManagerTC
      API_KEY: '${TOMTOM}'
    ports:
      - '32775:8080'
    labels:
      ARTIFACT_CATEGORY: Computation
      REPLICAS: ManagerTC,ManagerTC2
  
  stm_basededonnee:
    image: postgres:latest
    container_name: stm_basededonnee_container
    environment:
      POSTGRES_SERVER_ADRESSE: ${POSTGRES_SERVER_ADRESSE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      ID: stm_basededonnee_container
    ports:
      - "${DB_PORT}:5432"
    labels:
      ARTIFACT_CATEGORY: Database
    volumes:
      - dbstm:/var/lib/postgresql/data

  bd_redis:
    image: redis:latest
    container_name: BD_Redis
    environment:
      REDIS_ID: BD_Redis
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      ID: BD_Redis
    ports:
      - "${REDIS_PORT:-6379}:6379"  # Utilise la variable d'environnement REDIS_PORT, avec 6379 par défaut
    labels:
      ARTIFACT_CATEGORY: Database
    volumes:
      - redis_data:/data  # Persistance des données avec un volume

volumes:
  redis_data:
  dbstm: